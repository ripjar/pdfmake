var fonts = {
	NotoSansRTL: {
		normal: "examples/fonts/NotoSansRTL-Regular.ttf",
		bold: "examples/fonts/NotoSansRTL-Bold.ttf",
		italics: "examples/fonts/NotoSansRTL-Regular.ttf",
		bolditalics: "examples/fonts/NotoSansRTL-Bold.ttf",
	},
	Roboto: {
		normal: "examples/fonts/Roboto-Regular.ttf",
		bold: "examples/fonts/Roboto-Medium.ttf",
		italics: "examples/fonts/Roboto-Italic.ttf",
		bolditalics: "examples/fonts/Roboto-MediumItalic.ttf",
	},
};

var PdfPrinter = require("../src/printer");
var printer = new PdfPrinter(fonts);
var fs = require("fs");

// for ease of assigning fonts
const hebrew = "NotoSansRTL";
const arabic = "NotoSansRTL";
const rtl = "NotoSansRTL";
const english = "Roboto";

const shortEnglish = "The man and his dog";
const mediumEnglish = "The man and his dog and his cat";
const longEnglish =
	"The man and his dog and his cat and his snake went for a really long walk to ensure that they started a new line";
const superLongEnglish =
	"The man and his dog and his cat and his snake went for a really long walk to ensure that they started a new line but the problem was that this wasn't necessarily a new line in hebrew";
const longEnglishWithPunctuation =
	"The man, [his] dog: his cat! and his (snake) went {} for a really <long> walk to /ensure? that ...they started a new line";
const longEnglishWithNewlines =
	"The man and his dog and his cat\nand his snake went for a really long walk\nto test out newlines";
// All hebrew sentences generated by using google translate on the corresponding english sentences
// A space is then manually added to the RHS of the string - required for current way that BIDI is
// implemented to avoid word order problems

const shortHebrew = "האיש וכלבו ";
const mediumHebrew = "האיש וכלבו והחתול שלו ";
const longHebrew =
	"האיש וכלבו והחתול שלו והנחש שלו יצאו לטיול ממש ארוך כדי להבטיח שהם מתחילים קו חדש ";
const superLongHebrew =
	"האיש וכלבו והחתול שלו והנחש שלו יצאו לטיול ממש ארוך כדי להבטיח שהם מתחילים קו חדש אבל הבעיה הייתה שזה לא בהכרח קו חדש בעברית ";
const longHebrewWithPunctuation =
	"האיש, הכלב שלו: החתול שלו! שלו (הנחש) הלך {} להליכה ממש <ארוכה> כדי / להבטיח? ש ... הם התחילו קו חדש ";
const longHebrewWithNewlines =
	"האיש וכלבו והחתול שלו \nוהנחש שלו הלך לטייל ממש ארוך \nכדי לבדוק קווים חדשים ";

let testCounter = 0;
const generateTestHeader = (string) => {
	return { text: string, fontSize: 16 };
};
const generateTestString = (string) => {
	return { text: `Test ${testCounter++}: ${string}` };
};

// accepts an array of arrays [string, language]
const generateInlineRtlTest = (stringsAndLanguages = []) => {
	const nestedTextArray = [];
	stringsAndLanguages.forEach(([string, language], i) => {
		let displayString = string;
		// from the UI we're expecting to get space separated chunks of
		// inline text, so this adds a space to all strings apart from first and
		// last
		if (i !== stringsAndLanguages.length - 1) {
			displayString += " ";
		}
		nestedTextArray.push({
			text: displayString,
			font: language,
			inlineRtl: language === hebrew,
		});
	});
	return {
		text: nestedTextArray,
	};
};
const generateRtlTest = (string, font = "Roboto") => {
	return { text: string, font, rtl: font === hebrew };
};
const newline = () => {
	return { text: "\n" };
};

var docDefinition = {
	content: [
		{
			text: [
				{
					text: [
						{
							text: "KYC - Admin\n",
							font: "Roboto",
							style: "commentUser",
							inlineRtl: false,
						},
					],
				},
				{ text: "05 Jul 2021 at 4:21 PM\n", style: "commentTimestamp" },
				{
					text: [
						{
							text: "Some english then ",
							font: "Roboto",
							style: "",
							inlineRtl: false,
						},
						{
							text: "قليلا من العربية  ",
							font: "NotoSansRTL",
							style: "",
							inlineRtl: true,
						},
						{
							text: "and more",
							font: "Roboto",
							style: "",
							inlineRtl: false,
						},
					],
				},
				{ text: "\n\n" },
			],
		},
	],
};

var pdfDoc = printer.createPdfKitDocument(docDefinition);
pdfDoc.pipe(fs.createWriteStream("examples/pdfs/rtl-tests.pdf"));
pdfDoc.end();
